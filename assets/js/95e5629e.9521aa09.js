"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[413],{5680:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>h});var n=r(6540);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(h,l(l({ref:t},u),{},{components:r})):n.createElement(h,l({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<a;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9365:(e,t,r)=>{r.d(t,{A:()=>l});var n=r(6540),o=r(53);const a={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:r,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,o.A)(a.tabItem,l),hidden:r},t)}},1470:(e,t,r)=>{r.d(t,{A:()=>w});var n=r(8168),o=r(6540),a=r(53),l=r(3104),s=r(6347),i=r(7485),c=r(1682),u=r(9466);function p(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:o}}=e;return{value:t,label:r,attributes:n,default:o}}))}function d(e){const{values:t,children:r}=e;return(0,o.useMemo)((()=>{const e=t??p(r);return function(e){const t=(0,c.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function m(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:r}=e;const n=(0,s.W6)(),a=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,i.aZ)(a),(0,o.useCallback)((e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})}),[a,n])]}function f(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,a=d(e),[l,s]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:a}))),[i,c]=h({queryString:r,groupId:n}),[p,f]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,a]=(0,u.Dv)(r);return[n,(0,o.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:n}),v=(()=>{const e=i??p;return m({value:e,tabValues:a})?e:null})();(0,o.useLayoutEffect)((()=>{v&&s(v)}),[v]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),f(e)}),[c,f,a]),tabValues:a}}var v=r(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:r,selectedValue:s,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.a_)(),d=e=>{const t=e.currentTarget,r=u.indexOf(t),n=c[r].value;n!==s&&(p(t),i(n))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const r=u.indexOf(e.currentTarget)+1;t=u[r]??u[0];break}case"ArrowLeft":{const r=u.indexOf(e.currentTarget)-1;t=u[r]??u[u.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":r},t)},c.map((e=>{let{value:t,label:r,attributes:l}=e;return o.createElement("li",(0,n.A)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,a.A)("tabs__item",y.tabItem,l?.className,{"tabs__item--active":s===t})}),r??t)})))}function g(e){let{lazy:t,children:r,selectedValue:n}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===n));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},a.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function k(e){const t=f(e);return o.createElement("div",{className:(0,a.A)("tabs-container",y.tabList)},o.createElement(b,(0,n.A)({},e,t)),o.createElement(g,(0,n.A)({},e,t)))}function w(e){const t=(0,v.A)();return o.createElement(k,(0,n.A)({key:String(t)},e))}},3430:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var n=r(8168),o=(r(6540),r(5680)),a=r(1470),l=r(9365);const s={sidebar_position:3,sidebar_label:"General Functions"},i="General Functions",c={unversionedId:"docs/drive-class/general-functions",id:"docs/drive-class/general-functions",title:"General Functions",description:"JAR Template provides a quick setup for arcade and tank control for tank drive robots, and holonomic control for holonomic robots. This setup is a quick way to check that each drive port is reversed properly and that the robot drives well.",source:"@site/docs/docs/drive-class/general-functions.md",sourceDirName:"docs/drive-class",slug:"/docs/drive-class/general-functions",permalink:"/JAR-Template/docs/drive-class/general-functions",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"General Functions"},sidebar:"tutorialSidebar",previous:{title:"Motion Functions",permalink:"/JAR-Template/docs/drive-class/motion-functions"},next:{title:"Odometry Class",permalink:"/JAR-Template/docs/odometry-class"}},u={},p=[{value:"control_arcade();",id:"control_arcade",level:2},{value:"control_tank();",id:"control_tank",level:2},{value:"control_holonomic();",id:"control_holonomic",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...r}=e;return(0,o.yg)(m,(0,n.A)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"general-functions"},"General Functions"),(0,o.yg)("p",null,"JAR Template provides a quick setup for arcade and tank control for tank drive robots, and holonomic control for holonomic robots. This setup is a quick way to check that each drive port is reversed properly and that the robot drives well."),(0,o.yg)("h2",{id:"control_arcade"},"control_arcade();"),(0,o.yg)(a.A,{groupId:"arcade",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.yg)(l.A,{value:"example",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"void usercontrol(void) {\n  // User control code here, inside the loop\n  while (1) {\n    // This is the main execution loop for the user control program.\n    // Each time through the loop your program should update motor + servo\n    // values based on feedback from the joysticks.\n\n    // ........................................................................\n    // Insert user code here. This is where you use the joystick values to\n    // update your motors, etc.\n    // ........................................................................\n    if(Controller1.ButtonL1.pressing()){\n      Lift.spin(fwd, 100, percent);\n    }else if(Controller1.ButtonL2.pressing()){\n      Lift.spin(reverse, 100, percent);\n    }else{\n      Lift.stop(hold);\n    }\n\n    //Replace this line with chassis.control_tank(); for tank drive \n    //or chassis.control_holonomic(); for holo drive.\n    chassis.control_arcade();\n\n    wait(20, msec); // Sleep the task for a short amount of time to\n                    // prevent wasted resources.\n  }\n}\n"))),(0,o.yg)(l.A,{value:"proto",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"void Drive::control_arcade();\n")))),(0,o.yg)("p",null,"In JAR Template arcade, the left joystick controls forward/backward movement, and the right joystick controls turning. "),(0,o.yg)("h2",{id:"control_tank"},"control_tank();"),(0,o.yg)(a.A,{groupId:"tank",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.yg)(l.A,{value:"example",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"void usercontrol(void) {\n  // User control code here, inside the loop\n  while (1) {\n    // This is the main execution loop for the user control program.\n    // Each time through the loop your program should update motor + servo\n    // values based on feedback from the joysticks.\n\n    // ........................................................................\n    // Insert user code here. This is where you use the joystick values to\n    // update your motors, etc.\n    // ........................................................................\n    if(Controller1.ButtonL1.pressing()){\n      Lift.spin(fwd, 100, percent);\n    }else if(Controller1.ButtonL2.pressing()){\n      Lift.spin(reverse, 100, percent);\n    }else{\n      Lift.stop(hold);\n    }\n\n    //Replace this line with chassis.control_tank(); for tank drive \n    //or chassis.control_holonomic(); for holo drive.\n    chassis.control_tank();\n\n    wait(20, msec); // Sleep the task for a short amount of time to\n                    // prevent wasted resources.\n  }\n}\n"))),(0,o.yg)(l.A,{value:"proto",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"void Drive::control_tank();\n")))),(0,o.yg)("h2",{id:"control_holonomic"},"control_holonomic();"),(0,o.yg)("p",null,"Holonomic control just means that the drivetrain can move in all directions, like a mecanum or X-Drive."),(0,o.yg)(a.A,{groupId:"holo",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],mdxType:"Tabs"},(0,o.yg)(l.A,{value:"example",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"void usercontrol(void) {\n  // User control code here, inside the loop\n  while (1) {\n    // This is the main execution loop for the user control program.\n    // Each time through the loop your program should update motor + servo\n    // values based on feedback from the joysticks.\n\n    // ........................................................................\n    // Insert user code here. This is where you use the joystick values to\n    // update your motors, etc.\n    // ........................................................................\n    if(Controller1.ButtonL1.pressing()){\n      Lift.spin(fwd, 100, percent);\n    }else if(Controller1.ButtonL2.pressing()){\n      Lift.spin(reverse, 100, percent);\n    }else{\n      Lift.stop(hold);\n    }\n\n    //Replace this line with chassis.control_tank(); for tank drive \n    //or chassis.control_holonomic(); for holo drive.\n    chassis.control_holonomic();\n\n    wait(20, msec); // Sleep the task for a short amount of time to\n                    // prevent wasted resources.\n  }\n}\n"))),(0,o.yg)(l.A,{value:"proto",mdxType:"TabItem"},(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-cpp"},"void Drive::control_holonomic();\n")))))}h.isMDXComponent=!0}}]);